---
import { preview, type GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list-response";
import type { PokemonDetail } from "@interfaces/pokemon-detail-response";
import { Icon } from "astro-icon/components";

import MainLayout from '@layouts/MainLayout.astro';
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import { imageConfig } from "astro:assets";

export const getStaticPaths = (async() => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = await resp.json() as PokemonListResponse;

  const options = results.map(({name,url}) => {
    const id = url.split('/').at(-2)
    return {
      params: {name},
      props: {id, name, url},
    }
  })

  return options;

}) satisfies GetStaticPaths;

const {url, name,id} = Astro.props;
const image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;

const resp = await fetch(url);
const DetailPokemon = await resp.json() as PokemonDetail;
const { weight, cries, height, types  } = DetailPokemon;

---

<MainLayout title=`Pokemon - #${id} | ${name}` description=`InformaciÃ³n de Pokemon - ${name}` image={image}>
  <div class="py-3 flex justify-between items-center">
    <h2 class="text-5xl capitalize font-bold">{name}</h2>
    <button class="bg-slate-900 hover:bg-slate-600 transition-colors duration-300 rounded-lg px-4 py-2" onclick="window.history.back()">Volver</button>
  </div>
  <div class="flex flex-col justify-center items-center bg-gradient-to-b from-slate-900 to-transparent rounded-xl relative">
    <button id="favoriteBtn" class="absolute top-2 right-2" data-name={name} data-id={id}>
      <Icon data-outline name="heart-outlined" class="text-red-500" size={30} />
      <Icon data-full name="heart-full" class="text-red-500 hidden" size={30} />
    </button>
    <PokemonCard name={name} image={image} url={url} pokeId={id} isBig={true} />
    <div class="w-full justify-center flex gap-x-9 py-9 text-center">
      <h3 class="attrs">Weight: {weight}</h3>
      <h3 class="attrs">Height: {height}</h3>
      <h3 class="attrs">Type: { types[0].type.name}</h3>
    </div>
    <audio controls src={cries.latest}></audio>
  </div>
</MainLayout>


<script>
  import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(localStorage.getItem('favorites') ?? '[]');

    const favoriteInfo = document.querySelector('#favoriteBtn') as HTMLButtonElement;
    const heartOutline = document.querySelector('[data-outline]') as HTMLElement;
    const heartFull = document.querySelector('[data-full]') as HTMLElement;
    const name = favoriteInfo?.dataset.name ?? '';
    const id = favoriteInfo?.dataset.id ?? '';
    const isFavorite = favoritePokemons.some((fav) => fav.name === name);

    heartOutline.classList.toggle('hidden', isFavorite);
    heartFull.classList.toggle('hidden', !isFavorite);
    
    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);
      if(isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        favoritePokemons.push({
          name: name,
          id: +id
        });
      }
      localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
    }
    

    favoriteInfo.addEventListener('click', () => {
      heartOutline.classList.toggle('hidden');
      heartFull.classList.toggle('hidden');
      toggleFavorite();
    })
  }

  document.addEventListener('astro:page-load', handlePageLoad);

</script>

<style>
  .attrs {
    @apply text-2xl font-bold text-slate-500 capitalize;
  }

  #favoriteBtn {
    @apply hover:animate-pulse;
  }
</style>